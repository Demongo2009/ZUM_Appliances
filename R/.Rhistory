install.packages("tidyverse")
library(tidyverse)
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
hist(data %>% select(name))
}
}
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
hist(data[name])
}
}
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
hist(data[,name])
}
}
#hist()
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
hist(data[,name],main = name )
}
}
#hist()
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
hist(data[,name],main = paste("Histogram of ",name), xlab=name )
}
}
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
hist(data[,name],main = paste("Histogram of ",name), xlab=name, breaks = 20)
}
}
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
hist(data[,name],main = paste("Histogram of ",name), xlab=name, breaks = 30)
}
}
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
#  hist(data[,name],main = paste("Histogram of ",name), xlab=name, breaks = 30)
}
}
hist(data)
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
#  hist(data[,name],main = paste("Histogram of ",name), xlab=name, breaks = 30)
}
}
hist(data[,2:29])
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
#  hist(data[,name],main = paste("Histogram of ",name), xlab=name, breaks = 30)
}
}
install("Hmisc")
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
#  hist(data[,name],main = paste("Histogram of ",name), xlab=name, breaks = 30)
}
}
install.packages("Hmisc")
library(Hmisc)
hist.data.frame(data[,2:29])
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
#  hist(data[,name],main = paste("Histogram of ",name), xlab=name, breaks = 30)
}
}
data<-data[,order(names(data))]
#hist.data.frame(data[,2:10])
#hist.data.frame(data[,11:10])
col_names <- colnames(data[,2:29])
col_names <- row_names[order(row_names)]
for (name in col_names){
if (name != "date"){
#  hist(data[,name],main = paste("Histogram of ",name), xlab=name, breaks = 30)
}
}
data<-data[,order(names(data))]
data_numeric <- subset( data, select = -date )
#hist.data.frame(data[,2:10])
#hist.data.frame(data[,11:10])
View(data_numeric)
data<-data[,order(names(data))]
data_numeric <- subset( data, select = -date )
hist.data.frame(data_numeric[,1:7])
hist.data.frame(data_numeric[,8:14])
hist.data.frame(data_numeric[,15:21])
hist.data.frame(data_numeric[,22:28])
data<-data[,order(names(data))]
data_numeric <- subset( data, select = -date )
hist.data.frame(data_numeric[,1:14])
hist.data.frame(data_numeric[,15:28])
qqnorm(data$Appliances,)
qqline(trees$Appliances)
qqnorm(data$Appliances,)
qqline(data$Appliances)
qqnorm(data_numeric)
data_long <- pivot_longer(data_numeric,names_to ='key')
data_long <- pivot_longer(data_numeric,cols = c(insert columns you want),names_to ='key')
data_long <- pivot_longer(data_numeric,cols =colnames(data_numeric),names_to ='key')
ggplot(data_long) +
stat_qq() +
facet_wrap(~key)
data_long <- pivot_longer(data_numeric,cols =colnames(data_numeric),names_to ='key')
ggplot(data_long,aes(y = value)) +
stat_qq() +
facet_wrap(~key)
for (i in 1:ncol(data_numeric[,1: ncol(data_numeric) - 1 ])){
qqnorm(data_numeric[, i], main = names(data_numeric[i]))
qqline(data_numeric[, i])
}
for (i in 1:ncol(data_numeric[,1: ncol(data_numeric) - 1 ])){
qqnorm(data_numeric[, i], main = names(data_numeric[i]), col=3)
qqline(data_numeric[, i])
}
ibrary(corrplot)
install.packages("corrplot")
ibrary(corrplot)
library(corrplot)
corrplot(data_numeric, type = "upper", order = "hclust",
tl.col = "black")
library(corrplot)
res <- cor(data_numeric)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black")
library(corrplot)
res <- cor(data_numeric)
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(corrplot)
res <- cor(data)
library(corrplot)
res <- cor(data_numeric)
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
data$date
data <- read.csv(file = "../data/energydata_complete.csv", stringsAsFactors = FALSE)
data<-data[order(data$date),]
str(data)
#wyliczenia dla kolumn numerycznych
row_names <- colnames(data[,2:29])
mean <- apply(data[,2:29],2, mean)
median <-apply(data[,2:29],2,median)
min <-apply(data[,2:29],2,min)
max<-apply(data[,2:29],2,max)
std<-apply(data[,2:29],2,sd)
number_data.df <- data.frame(row_names, mean, median, min, max, std)
number_data.df[,2:6]<-round(number_data.df[,2:6], 2)
number_data.df[order(number_data.df$row_names),]
# wyliczenia dla date:
mean_date <-mean.Date(as.Date(data[,1:1], format=c("%Y-%m-%d")))
median_date <-median(data[,1:1])
min_date<- min(as.Date(data[,1:1], format=c("%Y-%m-%d")))
max_date<- max(as.Date(data[,1:1], format=c("%Y-%m-%d")))
date_numeric <-as.numeric(as.POSIXct(data[,1:1], format=c("%Y-%m-%d")))
std_date_days<- sd(date_numeric, na.rm = TRUE)/60/60/24
date_data.df <- data.frame("date", mean_date, median_date, min_date, max_date, std_date_days)
#date_data.df[,2:6]<-round(number_data.df[,2:6], 2)
date_data.df
# w ilu kolumnach brakuje danych
which(is.na(data))
# ile jest łącznie brakujących danych
sum(is.na(data))
data$date<-as.Date(data$date, format=c("%Y-%m-%d"))
plot(data$date,data$Appliances,type="l", col=3, main="Power usage from Appliances in time")
plot(data$date,data$lights,type="l", col=3, main="Power usage from lights in time")
install.packages("Hmisc")
library(Hmisc)
data<-data[,order(names(data))]
data_numeric <- subset( data, select = -date )
hist.data.frame(data_numeric[,1:14])
hist.data.frame(data_numeric[,15:28])
for (i in 1:ncol(data_numeric[,1: ncol(data_numeric) - 1 ])){
qqnorm(data_numeric[, i], main = names(data_numeric[i]), col=3)
qqline(data_numeric[, i])
}
install.packages("corrplot")
library(corrplot)
hour<-
res <- cor(data_numeric)
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
install.packages("corrplot")
data$date<-as.Date(data$date, format=c("%Y-%m-%d %h:%m:%s"))
plot(data$date,data$Appliances,type="l", col=3, main="Power usage from Appliances in time")
plot(data$date,data$lights,type="l", col=3, main="Power usage from lights in time")
library(corrplot)
hour<-as.POSIXct(data[,1:1], format=c(%h)
library(corrplot)
hour<-as.POSIXct(data[,1:1], format=c(%h))
library(corrplot)
hour<-hour(data[,1:1])
install.packages("corrplot")
install.packages("lubridate")
install.packages("corrplot")
library(lubridate)
library(corrplot)
hour<-hour(data[,1:1])
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data <- read.csv(file = "../data/energydata_complete.csv", stringsAsFactors = FALSE)
data<-data[order(data$date),]
str(data)
#wyliczenia dla kolumn numerycznych
row_names <- colnames(data[,2:29])
mean <- apply(data[,2:29],2, mean)
median <-apply(data[,2:29],2,median)
min <-apply(data[,2:29],2,min)
max<-apply(data[,2:29],2,max)
std<-apply(data[,2:29],2,sd)
number_data.df <- data.frame(row_names, mean, median, min, max, std)
number_data.df[,2:6]<-round(number_data.df[,2:6], 2)
number_data.df[order(number_data.df$row_names),]
# wyliczenia dla date:
mean_date <-mean.Date(as.Date(data[,1:1], format=c("%Y-%m-%d")))
median_date <-median(data[,1:1])
min_date<- min(as.Date(data[,1:1], format=c("%Y-%m-%d")))
max_date<- max(as.Date(data[,1:1], format=c("%Y-%m-%d")))
date_numeric <-as.numeric(as.POSIXct(data[,1:1], format=c("%Y-%m-%d")))
std_date_days<- sd(date_numeric, na.rm = TRUE)/60/60/24
date_data.df <- data.frame("date", mean_date, median_date, min_date, max_date, std_date_days)
#date_data.df[,2:6]<-round(number_data.df[,2:6], 2)
date_data.df
data$date<-as.Date(data$date, format=c("%Y-%m-%d %h:%m:%s"))
plot(data$date,data$Appliances,type="l", col=3, main="Power usage from Appliances in time")
data <- read.csv(file = "../data/energydata_complete.csv", stringsAsFactors = FALSE)
data<-data[order(data$date),]
str(data)
#wyliczenia dla kolumn numerycznych
row_names <- colnames(data[,2:29])
mean <- apply(data[,2:29],2, mean)
median <-apply(data[,2:29],2,median)
min <-apply(data[,2:29],2,min)
max<-apply(data[,2:29],2,max)
std<-apply(data[,2:29],2,sd)
number_data.df <- data.frame(row_names, mean, median, min, max, std)
number_data.df[,2:6]<-round(number_data.df[,2:6], 2)
number_data.df[order(number_data.df$row_names),]
# wyliczenia dla date:
mean_date <-mean.Date(as.Date(data[,1:1], format=c("%Y-%m-%d")))
median_date <-median(data[,1:1])
min_date<- min(as.Date(data[,1:1], format=c("%Y-%m-%d")))
max_date<- max(as.Date(data[,1:1], format=c("%Y-%m-%d")))
date_numeric <-as.numeric(as.POSIXct(data[,1:1], format=c("%Y-%m-%d")))
std_date_days<- sd(date_numeric, na.rm = TRUE)/60/60/24
date_data.df <- data.frame("date", mean_date, median_date, min_date, max_date, std_date_days)
#date_data.df[,2:6]<-round(number_data.df[,2:6], 2)
date_data.df
# w ilu kolumnach brakuje danych
which(is.na(data))
# ile jest łącznie brakujących danych
sum(is.na(data))
data1<-as.Date(data$date, format=c("%Y-%m-%d"))
plot(data1,data$Appliances,type="l", col=3, main="Power usage from Appliances in time")
plot(data1,data$lights,type="l", col=3, main="Power usage from lights in time")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
res <- cor(data_numeric)
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
res <- cor(data_numeric)
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
sum(is.na(hour))
res <- cor(data_numeric)
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
data$date(is.na(hour))
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
data$date[is.na(hour)]
res <- cor(data_numeric)
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%m:%S")))
data_numeric['hour']<-hour
data$date[is.na(hour)]
res <- cor(data_numeric)
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
data$date[is.na(hour)]
res <- cor(data_numeric)
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
data$date[is.na(hour)]
res <- cor(data_numeric, na.rm = TRUE)
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
data$date[is.na(hour)]
res <- cor(data_numeric, use = "all.obs")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
data$date[is.na(hour)]
res <- cor(data_numeric, use = "everything")
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
data$date[is.na(hour)]
res <- cor(data_numeric, use = "everything")
res
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
data$date[is.na(hour)]
res <- cor(data_numeric, use = "complete.obs")
res
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
data$date[is.na(hour)]
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
#pory dnia
#22:00 - 6:00 noc
#6:00-10:00 rano
#10:00-12:00 przedpolodnie
#12:00 - 14:00 wczesne popolodnie
#14:00 -18:00 popolodnie
#18:00 - 22:00 -wieczor
time_of_day <- rep(0,lenght(data$date))
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
#pory dnia
#22:00 - 6:00 noc
#6:00-10:00 rano
#10:00-12:00 przedpolodnie
#12:00 - 14:00 wczesne popolodnie
#14:00 -18:00 popolodnie
#18:00 - 22:00 -wieczor
time_of_day <- rep(0,size(data$date))
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
#pory dnia
#22:00 - 6:00 noc
#6:00-10:00 rano
#10:00-12:00 przedpolodnie
#12:00 - 14:00 wczesne popolodnie
#14:00 -18:00 popolodnie
#18:00 - 22:00 -wieczor
time_of_day <- rep(0,length(data$date))
res <- cor(data_numeric, use = "complete.obs")
res
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
hist(hour)
data_numeric['hour']<-hour
#pory dnia
#22:00 - 6:00 noc 12
#6:00-10:00 rano 16
#10:00-12:00 przedpolodnie 18
#12:00 - 14:00 wczesne popolodnie 20
#14:00 -18:00 popolodnie 24
#18:00 - 22:00 -wieczor 4
time_of_day <- rep(0,length(data$date))
time_of_day[(hour>=22&hour<=24)|(hour>=0&hour<6)]=12
time_of_day[(hour>=6&hour<10)]=16
time_of_day[(hour>=10&hour<12)]=18
time_of_day[(hour>=12&hour<14)]=20
res <- cor(data_numeric, use = "complete.obs")
res
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
#pory dnia
#22:00 - 6:00 noc 12
#6:00-10:00 rano 16
#10:00-12:00 przedpolodnie 18
#12:00 - 14:00 wczesne popolodnie 20
#14:00 -18:00 popolodnie 24
#18:00 - 22:00 -wieczor 4
time_of_day <- rep(0,length(data$date))
time_of_day[(hour>=22&hour<=24)|(hour>=0&hour<6)]=12
time_of_day[(hour>=6&hour<10)]=16
time_of_day[(hour>=10&hour<12)]=18
time_of_day[(hour>=12&hour<14)]=20
time_of_day[(hour>=14&hour<18)]=24
time_of_day[(hour>=18&hour<22)]=4
data_numeric['time_of_day']<-time_of_day
res <- cor(data_numeric, use = "complete.obs")
res
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
#pory dnia
#22:00 - 6:00 noc 1
#6:00-10:00 rano 2
#10:00-12:00 przedpolodnie 3
#12:00 - 14:00 wczesne popolodnie 4
#14:00 -18:00 popolodnie 5
#18:00 - 22:00 -wieczor 0
time_of_day <- rep(0,length(data$date))
time_of_day[(hour>=22&hour<=24)|(hour>=0&hour<6)]=1
time_of_day[(hour>=6&hour<10)]=2
time_of_day[(hour>=10&hour<12)]=3
time_of_day[(hour>=12&hour<14)]=4
time_of_day[(hour>=14&hour<18)]=5
time_of_day[(hour>=18&hour<22)]=0
data_numeric['time_of_day']<-time_of_day
res <- cor(data_numeric, use = "complete.obs")
res
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
library(lubridate)
library(corrplot)
hour<-hour(as.POSIXct(data[,1:1], format=c("%Y-%m-%d %H:%M:%S")))
data_numeric['hour']<-hour
#pory dnia
#22:00 - 6:00 noc 1
#6:00-10:00 rano 2
#10:00-12:00 przedpolodnie 3
#12:00 - 14:00 wczesne popolodnie 4
#14:00 -18:00 popolodnie 5
#18:00 - 22:00 -wieczor 0
time_of_day <- rep(0,length(data$date))
time_of_day[(hour>=22&hour<=24)|(hour>=0&hour<6)]=1
time_of_day[(hour>=6&hour<10)]=2
time_of_day[(hour>=10&hour<12)]=3
time_of_day[(hour>=12&hour<14)]=4
time_of_day[(hour>=14&hour<18)]=5
time_of_day[(hour>=18&hour<22)]=0
data_numeric['time_of_day']<-time_of_day
res <- cor(data_numeric, use = "complete.obs")
round(res, 2)
corrplot(res, type = "full", order = "hclust",
tl.col = "black")
write.csv(data_numeric,'./data/energy_data_after_analysis.csv')
write.csv(data_numeric,'../data/energy_data_after_analysis.csv')
for (i in 1:ncol(data_numeric[,1: ncol(data_numeric) ])){
qqnorm(data_numeric[, i], main = names(data_numeric[i]), col=3)
qqline(data_numeric[, i])
}
for (i in 1:ncol(data_numeric[,1: ncol(data_numeric) ])){
qqnorm(data_numeric[, i], main = names(data_numeric[i]), col=3)
qqline(data_numeric[, i])
}
